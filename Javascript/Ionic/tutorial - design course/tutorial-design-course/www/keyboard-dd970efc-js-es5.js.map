{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/keyboard-dd970efc.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"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","file":"keyboard-dd970efc-js-es5.js","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n    previousVisualViewport = {};\n    currentVisualViewport = {};\n    keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n    startNativeListeners(win);\n    if (!win.visualViewport) {\n        return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    win.visualViewport.onresize = () => {\n        trackViewportChanges(win);\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\n            setKeyboardOpen(win);\n        }\n        else if (keyboardDidClose(win)) {\n            setKeyboardClose(win);\n        }\n    };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n    win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n    win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n    fireKeyboardOpenEvent(win, ev);\n    keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n    fireKeyboardCloseEvent(win);\n    keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n    const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n    return (!keyboardOpen &&\n        previousVisualViewport.width === currentVisualViewport.width &&\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n    return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n    const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n    const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n        detail: { keyboardHeight }\n    });\n    win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n    const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n    win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n    return {\n        width: Math.round(visualViewport.width),\n        height: Math.round(visualViewport.height),\n        offsetTop: visualViewport.offsetTop,\n        offsetLeft: visualViewport.offsetLeft,\n        pageTop: visualViewport.pageTop,\n        pageLeft: visualViewport.pageLeft,\n        scale: visualViewport.scale\n    };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"]}